# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr and automatically regenerate CMakeLists.txt
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)

	# Create a configure-time dependency on cmake.toml to improve IDE support
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Options
option(SAFETYHOOK_BUILD_TESTS "" OFF)

project(safetyhook)

if(CMKR_ROOT_PROJECT AND NOT CMKR_DISABLE_VCPKG)
	include(FetchContent)
	message(STATUS "Fetching vcpkg (2022.07.25)...")
	FetchContent_Declare(vcpkg URL "https://github.com/microsoft/vcpkg/archive/refs/tags/2022.07.25.tar.gz")
	FetchContent_GetProperties(vcpkg)
	if(NOT vcpkg_POPULATED)
		FetchContent_Populate(vcpkg)
		include("${vcpkg_SOURCE_DIR}/scripts/buildsystems/vcpkg.cmake")
	endif()
endif()

# Packages
find_package(bddisasm)

# Target: safetyhook
set(safetyhook_SOURCES
	"src/Builder.cpp"
	"src/Factory.cpp"
	"src/InlineHook.cpp"
	"src/MidHook.cpp"
	"src/ThreadFreezer.cpp"
	"include/SafetyHook.hpp"
	"include/safetyhook/Builder.hpp"
	"include/safetyhook/Context.hpp"
	"include/safetyhook/Factory.hpp"
	"include/safetyhook/InlineHook.hpp"
	"include/safetyhook/MidHook.hpp"
	"include/safetyhook/ThreadFreezer.hpp"
	cmake.toml
)

add_library(safetyhook STATIC)

target_sources(safetyhook PRIVATE ${safetyhook_SOURCES})
source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${safetyhook_SOURCES})

add_library(safetyhook::safetyhook ALIAS safetyhook)
target_compile_definitions(safetyhook PUBLIC
	NOMINMAX
)

target_compile_features(safetyhook PUBLIC
	cxx_std_17
)

if(MSVC) # msvc
	target_compile_options(safetyhook PRIVATE
		"/permissive-"
		"/W4"
		"/w14640"
	)
endif()

if((CMAKE_CXX_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$") OR (CMAKE_C_COMPILER_ID MATCHES "Clang" AND NOT CMAKE_C_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$")) # clang
	target_compile_options(safetyhook PRIVATE
		-Wall
		-Wextra
		-Wshadow
		-Wnon-virtual-dtor
		-pedantic
	)
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU" OR CMAKE_C_COMPILER_ID STREQUAL "GNU") # gcc
	target_compile_options(safetyhook PRIVATE
		-Wall
		-Wextra
		-Wshadow
		-Wnon-virtual-dtor
		-pedantic
	)
endif()

target_include_directories(safetyhook PUBLIC
	"include/"
)

target_link_libraries(safetyhook PUBLIC
	bddisasm::bddisasm
	ntdll
)

# Target: test0
if(SAFETYHOOK_BUILD_TESTS) # build-tests
	set(test0_SOURCES
		"tests/test0.cpp"
		cmake.toml
	)

	add_executable(test0)

	target_sources(test0 PRIVATE ${test0_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${test0_SOURCES})

	target_link_libraries(test0 PRIVATE
		safetyhook::safetyhook
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT test0)
	endif()

endif()
# Target: test1
if(SAFETYHOOK_BUILD_TESTS) # build-tests
	set(test1_SOURCES
		"tests/test1.cpp"
		cmake.toml
	)

	add_executable(test1)

	target_sources(test1 PRIVATE ${test1_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${test1_SOURCES})

	target_link_libraries(test1 PRIVATE
		safetyhook::safetyhook
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT test1)
	endif()

endif()
# Target: test2
if(SAFETYHOOK_BUILD_TESTS) # build-tests
	set(test2_SOURCES
		"tests/test2.cpp"
		cmake.toml
	)

	add_executable(test2)

	target_sources(test2 PRIVATE ${test2_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${test2_SOURCES})

	target_link_libraries(test2 PRIVATE
		safetyhook::safetyhook
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT test2)
	endif()

endif()
# Target: test3
if(SAFETYHOOK_BUILD_TESTS) # build-tests
	set(test3_SOURCES
		"tests/test3.cpp"
		cmake.toml
	)

	add_executable(test3)

	target_sources(test3 PRIVATE ${test3_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${test3_SOURCES})

	target_link_libraries(test3 PRIVATE
		safetyhook::safetyhook
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT test3)
	endif()

endif()
# Target: test4
if(SAFETYHOOK_BUILD_TESTS) # build-tests
	set(test4_SOURCES
		"tests/test4.cpp"
		cmake.toml
	)

	add_executable(test4)

	target_sources(test4 PRIVATE ${test4_SOURCES})
	source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${test4_SOURCES})

	target_link_libraries(test4 PRIVATE
		safetyhook::safetyhook
	)

	get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
	if(NOT CMKR_VS_STARTUP_PROJECT)
		set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT test4)
	endif()

endif()
